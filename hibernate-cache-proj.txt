import java.util.List;

import oneToOneTest.MProduct;
import oneToOneTest.MCategory;

import java.util.List;
import java.util.Set;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator; 
 

import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import util.HibernateUtil;


public class getData {

	private static SessionFactory factory; 
	private static Session session;
	private static Transaction tx;
	
	
	public static void codejava() throws Exception
	{
			
		try{
			
			System.out.println("adding new records============================");
			
			session = HibernateUtil.getSessionFactory().openSession();
	        session.beginTransaction();
	        
	        List<MProduct>products = session.createQuery("from MProduct").list();
	        
	        Iterator<MProduct> iterator = products.iterator();
	        MProduct obj= null;
	        
	        while(iterator.hasNext()) {
	        	obj = iterator.next();
	        	System.out.println(obj.getProdName());
	        }
	        
	        session.getTransaction().commit();
	        
		}catch(Exception e) {
			System.out.println("==========error="+e);
		}
		
	}
	
	public static void secondLevelCacheTest() throws Exception
	{
		try{
			
			System.out.println("Loading the data============================");
			
			session = HibernateUtil.getSessionFactory().openSession();
	        //session.beginTransaction();
	        
	        MProduct product = (MProduct)session.load(MProduct.class, new Integer(1));
	        System.out.println("Test line");
	        System.out.println("1:"+product.getProdName());
	        
	        session.close();
	        
	        	        
	        Session session2 = HibernateUtil.getSessionFactory().openSession();
	        //session.clear();
	        product = (MProduct)session2.load(MProduct.class, new Integer(1));
	        System.out.println("2:"+product.getProdName());
	         
	        session2.close();
	        
	        
		}catch(Exception e) {
			System.out.println("==========error="+e);
		}
		
	}
	public static void loadData() throws Exception
	{
			
		try{
			
			System.out.println("Loading the data============================");
			
			session = HibernateUtil.getSessionFactory().openSession();
	        session.beginTransaction();
	        
	        MProduct product = (MProduct)session.load(MProduct.class, new Integer(1));
	        System.out.println("1:"+product.getProdName());
	        
	        //session.clear();
	        product = (MProduct)session.load(MProduct.class, new Integer(2));
	        System.out.println("2:"+product.getProdName());
	        
	        product = (MProduct)session.load(MProduct.class, new Integer(1));
	        System.out.println("3:"+product.getProdName());
	        
	        session.getTransaction().commit();
	        session.close();
	        
		}catch(Exception e) {
			System.out.println("==========error="+e);
		}
		
	}
	 
	public static void main(String[] args) throws Exception {
		
		try {
				HibernateUtil.getSessionFactory();
				//codejava();
				// loadData();
				secondLevelCacheTest();
				 

		}catch(Exception e) {
			System.out.println("==error="+e);
		}
	}

}
=====================

package inheritance.tablePerClass;

import java.util.List;
import java.util.Set;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator; 
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


import util.HibernateUtil;


public class HibernateTest {

	private static SessionFactory factory; 
	private static Session session;
	private static Transaction tx;
	
	
	public static void codejava() throws Exception
	{
			
		try{
			
			System.out.println("adding new records============================");
			
			session = HibernateUtil.getSessionFactory().openSession();
	        session.beginTransaction();
	        
	        Vehicle vehicle = new Vehicle();
	        vehicle.setVehicle_name("Maruti");
	        vehicle.setVehicle_id(1);
	         
	        MotorCycle obj = new MotorCycle();
	        obj.setVehicle_name("two wheeler");
	        obj.setEngineTye("ABC");
	        obj.setVehicle_id(3);
	        session.save(vehicle);
	        session.save(obj);
	        
	        session.getTransaction().commit();
	        
		}catch(Exception e) {
			System.out.println("==========error="+e);
		}
		
	}
	 
	public static void main(String[] args) throws Exception {
		
		try {
				HibernateUtil.getSessionFactory();
				codejava();
				 

		}catch(Exception e) {
			System.out.println("==error="+e);
		}
	}

}
=======================
package inheritance.tablePerClass;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

@Entity
@Table(name="motorcycle")
public class MotorCycle extends Vehicle {

		@Column(name="engine_type")
		private String engineTye;

		
		public String getEngineTye() {
			return engineTye;
		}

		public void setEngineTye(String engineTye) {
			this.engineTye = engineTye;
		}
		
		
		
}

=====================

package inheritance.tablePerClass;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.Table;

@Entity
@Table(name="vehicle")
//@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)
public class Vehicle {

		@Id
		@Column(name="vehicle_id")
		//@GeneratedValue
		private int vehicle_id;
		
		@Column(name="vehicle_name")
		private String vehicle_name;

		
		public int getVehicle_id() {
			return vehicle_id;
		}

		public void setVehicle_id(int vehicle_id) {
			this.vehicle_id = vehicle_id;
		}

		public String getVehicle_name() {
			return vehicle_name;
		}

		public void setVehicle_name(String vehicle_name) {
			this.vehicle_name = vehicle_name;
		}
		
		
}

=====================
package oneToManyTest;

import java.util.List;
import java.util.Set;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator; 
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


import util.HibernateUtil;


public class HibernateTest {

	private static SessionFactory factory; 
	private static Session session;
	private static Transaction tx;
	
	
	public static void codejava() throws Exception
	{
			
		try{
			
			System.out.println("adding new records============================");
			
			session = HibernateUtil.getSessionFactory().openSession();
	        session.beginTransaction();
	        
	        MCategory category = new MCategory("Mobile Phone888");
	        
	        MProduct product1 = new MProduct("Samsung88",category);
	        MProduct product2 = new MProduct("Micromax88",category);
	        MProduct product3 = new MProduct("Vivo88",category);
			
	        Set<MProduct>products = new HashSet<MProduct>();
	        products.add(product1);
	        products.add(product2);
	        products.add(product3);
	        
	        category.setProducts(products);
	        
	        session.save(category);
	        
	        session.getTransaction().commit();
	        
		}catch(Exception e) {
			System.out.println("==========error="+e);
		}
		
	}
	 
	public static void main(String[] args) throws Exception {
		
		try {
				HibernateUtil.getSessionFactory();
				codejava();
				 

		}catch(Exception e) {
			System.out.println("==error="+e);
		}
	}

}
=================
package oneToManyTest;

import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

@Entity
@Table(name="MCategory")
public class MCategory {

		@Id
		@Column(name="category_id")
		@GeneratedValue
		private int id;
		
		@Column(name="category_name")
		private String categoryName;

		@OneToMany(mappedBy="category",cascade=CascadeType.ALL)		
		private Set<MProduct> products;
		
		
		public Set<MProduct> getProducts() {
			return products;
		}

		public void setProducts(Set<MProduct> products) {
			this.products = products;
		}

		public int getId() {
			return id;
		}

		public void setId(int id) {
			this.id = id;
		}

		public String getCategoryName() {
			return categoryName;
		}

		public void setCategoryName(String categoryName) {
			this.categoryName = categoryName;
		}
	
		public MCategory() {
			
		}
		public MCategory(String categoryName){
			
			this.categoryName=categoryName;
			
		}
		
}
============
package oneToManyTest;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

@Entity
@Table(name="MProduct")
public class MProduct {

		@Id
		@Column(name="product_id")
		@GeneratedValue
		private int id;
		
		@Column(name="product_name")
		private String prodName;
		
		@ManyToOne
		@JoinColumn(name="category_id")
		private MCategory category;


		public MProduct(String prodName,MCategory category)
		{
			this.prodName = prodName;
			this.category=category;
			
		}
		public int getId() {
			return id;
		}


		public void setId(int id) {
			this.id = id;
		}


		public String getProdName() {
			return prodName;
		}


		public void setProdName(String prodName) {
			this.prodName = prodName;
		}


		public MCategory getCategory() {
			return category;
		}


		public void setCategory(MCategory category) {
			this.category = category;
		}
		
}

================
package util;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.cfg.Configuration;


public class HibernateUtil  {

	private static final SessionFactory factory = buildSessionFactory();	
			
			
	private static 	SessionFactory buildSessionFactory()
	{
		
			try {
					
				SessionFactory factory = new AnnotationConfiguration().
		                   configure().
		                   //addPackage("com.xyz") //add package if used.
		                   //addAnnotatedClass(entity.Person.class).
		                   //addAnnotatedClass(entity.MProduct.class).
		                   //addAnnotatedClass(entity.MCategory.class).
		                   buildSessionFactory();
				return factory;
				
			}catch (Throwable ex) { 
		         System.err.println("Failed to create sessionFactory object." + ex);
		         throw new ExceptionInInitializerError(ex); 
		      }
	}
	
	public static SessionFactory getSessionFactory() {
		
		return factory;
	}
	
}

=================
package oneToOneTest;

import java.util.List;
import java.util.Set;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator; 
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


import util.HibernateUtil;


public class HibernateTest {

	private static SessionFactory factory; 
	private static Session session;
	private static Transaction tx;
	
	
	public static void codejava() throws Exception
	{
			
		try{
			
			System.out.println("adding new records============================");
			
			session = HibernateUtil.getSessionFactory().openSession();
	        session.beginTransaction();
	        
	        MCategory category1 = new MCategory("Company11");
	        
	        MProduct product1 = new MProduct("Samsung11");
	        
	        MCategory category2 = new MCategory("Book11");
	        MProduct product2 = new MProduct("Novel11");
	        
			category1.setProduct(product1);
			category2.setProduct(product2);
			
	        session.save(category1);
	        session.save(category2);
	        
	        session.getTransaction().commit();
	        
		}catch(Exception e) {
			System.out.println("==========error="+e);
		}
		
	}
	 
	public static void main(String[] args) throws Exception {
		
		try {
				HibernateUtil.getSessionFactory();
				codejava();
				 

		}catch(Exception e) {
			System.out.println("==error="+e);
		}
	}

}
=============
package oneToOneTest;

import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

@Entity
@Table(name="MCategory")
public class MCategory {

		@Id
		@Column(name="category_id")
		@GeneratedValue
		private int id;
		
		@Column(name="category_name")
		private String categoryName;

		@OneToOne(cascade=CascadeType.ALL)
		@JoinColumn(name="id")
		private MProduct product;	
			 

		public MProduct getProduct() {
			return product;
		}

		public void setProduct(MProduct product) {
			this.product = product;
		}

		public int getId() {
			return id;
		}

		public void setId(int id) {
			this.id = id;
		}

		public String getCategoryName() {
			return categoryName;
		}

		public void setCategoryName(String categoryName) {
			this.categoryName = categoryName;
		}
	
		public MCategory() {
			
		}
		public MCategory(String categoryName){
			
			this.categoryName=categoryName;
			
		}
		
}
==================
package oneToOneTest;

import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;


@Entity
@Table(name="MProduct")
@Cacheable
@Cache(usage= CacheConcurrencyStrategy.READ_ONLY)
public class MProduct {

		@Id
		@Column(name="product_id")
		@GeneratedValue
		private int id;
		
		@Column(name="product_name")
		private String prodName;
		
		public MProduct() {
			
		}
		
		public MProduct(String prodName )
		{
			this.prodName = prodName;
						
		}
		public int getId() {
			return id;
		}


		public void setId(int id) {
			this.id = id;
		}


		public String getProdName() {
			return prodName;
		}


		public void setProdName(String prodName) {
			this.prodName = prodName;
		}


		 
		
}
==================

package util;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.cfg.Configuration;


public class HibernateUtil  {

	private static final SessionFactory factory = buildSessionFactory();	
			
			
	private static 	SessionFactory buildSessionFactory()
	{
		
			try {
					
				SessionFactory factory = new AnnotationConfiguration().
		                   configure().
		                   //addPackage("com.xyz") //add package if used.
		                   //addAnnotatedClass(entity.Person.class).
		                   //addAnnotatedClass(entity.MProduct.class).
		                   //addAnnotatedClass(entity.MCategory.class).
		                   buildSessionFactory();
				return factory;
				
			}catch (Throwable ex) { 
		         System.err.println("Failed to create sessionFactory object." + ex);
		         throw new ExceptionInInitializerError(ex); 
		      }
	}
	
	public static SessionFactory getSessionFactory() {
		
		return factory;
	}
	
}

==================
ehcache.xml

<?xml version="1.0"?>  
<ehcache>  
<defaultCache   
maxElementsInMemory="100"   
eternal="false"   
timeToIdleSeconds="120"   
timeToLiveSeconds="200" />  
  
<cache name="oneToOneTest.MProduct"   
maxElementsInMemory="100"   
eternal="false"   
timeToIdleSeconds="5"   
timeToLiveSeconds="10" />  
</ehcache>  
===================

hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
    <hibernate-configuration>
        <session-factory>
            <property name="connection.driver_class">
                org.apache.derby.jdbc.EmbeddedDriver
            </property>
            <!-- <property name="connection.url">jdbc:derby:D:\\Mahesh\Projects\Derby\DerbyData\demo</property>  -->
            <property name="connection.url">jdbc:derby:D:\\Mahesh\Projects\Derby\DerbyData\demo</property>
            
            <!-- Below is required for 2nd level cache -->
            <property name="cache.provider_class">org.hibernate.cache.EhCacheProvider</property>  
			<property name="hibernate.cache.use_second_level_cache">true</property>
			 
            
            <property name="connection.username"></property>
            <property name="connection.password"></property>
            <property name="dialect">org.hibernate.dialect.DerbyDialect</property>
            <property name="hibernate.generate_statistics">true</property>
            <property name="show_sql">true</property>
            <!-- <property name="hibernate.jdbc.batch_size">1</property>  -->
            
            <property name="hibernate.hbm2ddl.auto">update</property>
            
            <!-- <mapping class="oneToManyTest.MProduct"/>
			<mapping class="oneToManyTest.MCategory"/>   -->

			<!-- oneToOneTest   -->
			<mapping class="oneToOneTest.MProduct"/>
			<mapping class="oneToOneTest.MCategory"/>
			
			<mapping class="inheritance.tablePerClass.Vehicle"/>
			<mapping class="inheritance.tablePerClass.MotorCycle"/>
			
        </session-factory>
    </hibernate-configuration>
	
	
